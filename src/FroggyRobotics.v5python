{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmotorTL = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nmotorTR = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nmotorBL = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nmotorBR = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nmotorCam = Motor(Ports.PORT11, GearSetting.RATIO_36_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ---------------------------------------\n# MADE BY: Oliver Fedderson              \n# MADE FOR: Vex Robotics 2023: Over Under\n# TEAM: FroggyRobotics            \n# ---------------------------------------\n\n# PORTOUT GUIDE KEY\n# \"P(number)\": indicates port number\n# \"->\": where something goes\n# TL (top left) TR (top right) R (right): cardinal directions\n# HD: holonomic drive\n\n# PORTOUT GUIDE\n\n# HD PORTOUT\n# P1 -> TL of HD\n# P2 -> TR of HD\n# P3 -> BL of HD\n# P4 -> BR of HD\n\n# MISC PORTOUT\n# P11 -> camera pan motor\n# P21 -> radio\n# camera -> any port\n\n\n# CODE READING GUIDE\n# motor(cardinal direction, same syntax as portout guide key): corresponds to that motor of the holonomic drive\n# motor(anything else): corresponds to the motor of what follows \"motor\"\n\n\n# Declares robot settings (for driver mode)\nsetting = 0\nsettingIndex = ['xySens', 'yawSens', 'cSens']\nsettings = {\n    'xySens': 50, # Changes the sensitivity/speed on the x and y axis of robot movement\n    'yawSens': 60, # Changes the sensitivity/speed on the yaw axis of robot movement\n    'cSens': 100, # Changes how fast the camera pans\n}\n\n# Initialize motors (this is needed because we control the bot by setting velocities)\nmotorTL.spin(FORWARD)\nmotorTR.spin(FORWARD)\nmotorBL.spin(FORWARD)\nmotorBR.spin(FORWARD)\nmotorCam.spin(FORWARD)\n\n# Declare button press booleans (to track button states so we have a nice toggle)\npressedUp = False\npressedDown = False\npressedLeft = False\npressedRight = False\npressedY = False\n\n# Declares other miscellaneous variables\nautomaticMode = False\n\n# Function to clamp parameter between 100 and -100 (for throttles)\ndef clamp(num):\n    return max(min(num, 100), -100)\n\n# Function to move drivetrain based on parameters\ndef moveDriveTrain(x, y, yaw):\n    motorTL.set_velocity(clamp((y + x) + yaw), PERCENT)\n    motorTR.set_velocity(clamp((y + (x * -1)) + yaw * -1), PERCENT)\n    motorBL.set_velocity(clamp((y + (x * -1) + yaw)), PERCENT)\n    motorBR.set_velocity(clamp((y + x) + yaw * -1), PERCENT)\n\n# Prints a setting to the controller screen\ndef infoText(index):\n    controller_1.screen.clear_row(2)\n    controller_1.screen.set_cursor(2,1)\n    controller_1.screen.print('{} = {}'.format(settingIndex[setting], settings[settingIndex[setting]]))\n\n# Puts desired text on row 1 of brain's screen\ndef brainAlert(text):\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(text)\n\n# Puts desired text on row 2 of controller's screen\ndef controllerAlert(text):\n    controller_1.screen.clear_row(2)\n    controller_1.screen.set_cursor(2,1)\n    controller_1.screen.print(text)\n\n\n# ----- START OF MAIN CODE -----\n\n\n# Prints starting text\nbrainAlert(\"Driver mode\")\ninfoText(setting)\n\n# Main loop\nwhile True:\n    # Gets controller axis positions every time code is looped\n    horizontal = controller_1.axis1.position() * (settings['xySens'] / 100)\n    vertical = controller_1.axis2.position() * (settings['xySens'] / 100)\n    yaw = controller_1.axis4.position() * (settings['yawSens'] / 100)\n\n    # Moves the drivtrain based on controller axis positions\n    moveDriveTrain(horizontal, vertical, yaw)\n\n    # Setting selector \n    if controller_1.buttonLeft.pressing() and pressedLeft == False:\n        pressedLeft = True\n        if setting > 0 :\n            setting -= 1\n            infoText(setting)\n\n        else:\n            setting = len(settingIndex) - 1\n            infoText(setting)\n\n    elif controller_1.buttonLeft.pressing() == False:\n        pressedLeft = False\n\n\n    if controller_1.buttonRight.pressing() and pressedRight == False:\n        pressedRight = True\n        if setting < len(settingIndex) -1:\n            setting += 1\n            infoText(setting)\n\n        else:\n            setting = 0\n            infoText(setting)\n\n    elif controller_1.buttonRight.pressing() == False:\n            pressedRight = False\n\n    # Changes selected setting\n    if controller_1.buttonUp.pressing() and pressedUp == False:\n        pressedUp = True\n        \n        if settings[settingIndex[setting]] < 100:\n            settings[settingIndex[setting]] += 5\n            infoText(setting)\n\n    elif controller_1.buttonUp.pressing() == False:\n        pressedUp = False\n\n    if controller_1.buttonDown.pressing() and pressedDown == False:\n        pressedDown = True\n        \n        if settings[settingIndex[setting]] > 0:\n            settings[settingIndex[setting]] -= 5\n            infoText(setting)\n\n    elif controller_1.buttonDown.pressing() == False:\n        pressedDown = False\n        \n    #haha\n\n    # Camera pan controls\n\n    if controller_1.buttonL1.pressing() == True:\n        motorCam.set_velocity(settings['cSens'], PERCENT)\n\n    elif controller_1.buttonL2.pressing() == True:\n        motorCam.set_velocity(settings['cSens'] * -1, PERCENT)\n\n    else:\n        motorCam.set_velocity(0, PERCENT)","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"motorTL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"motorTR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"motorBL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"motorBR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"motorCam","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}