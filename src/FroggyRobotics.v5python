{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmotor1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nmotor2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nmotor3 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nmotor4 = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nmotor5 = Motor(Ports.PORT11, GearSetting.RATIO_36_1, False)\nmotor6 = Motor(Ports.PORT12, GearSetting.RATIO_36_1, True)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# Declares robot settings (for driver mode)\nsetting = 0\nsettingIndex = ['xySens', 'yawSens', 'iSpeed', 'oSpeed']\nsettings = {\n    'xySens': 0.5, # Changes the sensitivity/speed on the x and y axis of robot movement\n    'yawSens': 0.6, # Changes the sensitivity/speed on the yaw axis of robot movement\n    'iSpeed': 25, # Changes the ball holder's intake speed\n    'oSpeed': 100, # Changes the ball holder's throwing speed\n}\n\n# Tells the motors how to initally move (since we move them by setting velocities)\nmotor1.spin(FORWARD)\nmotor2.spin(FORWARD)\nmotor3.spin(FORWARD)\nmotor4.spin(FORWARD)\nmotor5.spin(FORWARD)\nmotor6.spin(FORWARD)\n\n# Declare button press booleans\npressedUp = False\npressedDown = False\npressedLeft = False\npressedRight = False\npressedY = False\n\n# Declares other miscellaneous variables\nautomaticMode = False\n\n# Function to clamp parameter between 100 and -100\ndef clamp(num):\n    return max(min(num, 100), -100)\n\n# Function to move drivetrain based on parameters\ndef moveDriveTrain(x, y, yaw):\n    motor1.set_velocity(clamp((y + x) + yaw), PERCENT)\n    motor2.set_velocity(clamp((y + (x * -1)) + yaw * -1), PERCENT)\n    motor3.set_velocity(clamp((y + (x * -1) + yaw)), PERCENT)\n    motor4.set_velocity(clamp((y + x) + yaw * -1), PERCENT)\n\n# Prints a setting to the controller screen\ndef infoText(index):\n    controller_1.screen.clear_row(2)\n    controller_1.screen.set_cursor(2,1)\n    controller_1.screen.print('{} = {}'.format(settingIndex[setting], settings[settingIndex[setting]]))\n\n# Puts desired text on row 1 of brain's screen\ndef brainAlert(text):\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(text)\n\n# Puts desired text on row 2 of controller's screen\ndef controllerAlert(text):\n    controller_1.screen.clear_row(2)\n    controller_1.screen.set_cursor(2,1)\n    controller_1.screen.print(text)\n\n\n# -- START OF MAIN CODE --\n\n\n# Prints starting text\nbrainAlert(\"Driver mode\")\ninfoText(setting)\n\n# Main loop\nwhile True:\n    # Gets controller axis positions every time code is looped\n    horizontal = controller_1.axis1.position() * settings['xySens']\n    vertical = controller_1.axis2.position() * settings['xySens'] * -1 \n    yaw = controller_1.axis4.position() * settings['yawSens']\n\n    # Moves the drivtrain based on controller axis positions\n    moveDriveTrain(horizontal, vertical, yaw)\n\n    # Setting selector \n    if controller_1.buttonLeft.pressing() and pressedLeft == False:\n        pressedLeft = True\n        if setting > 0 :\n            setting -= 1\n            infoText(setting)\n\n        else:\n            setting = len(settingIndex) - 1\n            infoText(setting)\n\n    elif controller_1.buttonLeft.pressing() == False:\n        pressedLeft = False\n\n\n    if controller_1.buttonRight.pressing() and pressedRight == False:\n        pressedRight = True\n        if setting < len(settingIndex) -1:\n            setting += 1\n            infoText(setting)\n\n        else:\n            setting = 0\n            infoText(setting)\n\n    elif controller_1.buttonRight.pressing() == False:\n            pressedRight = False\n\n    # Changes selected setting\n    if controller_1.buttonUp.pressing() and pressedUp == False:\n        pressedUp = True\n        if setting == 0 or setting == 1:\n            if settings[settingIndex[setting]] < 1:\n                settings[settingIndex[setting]] += 0.1\n                infoText(setting)\n\n        elif setting == 2 or setting == 3:\n            if settings[settingIndex[setting]] < 100:\n                settings[settingIndex[setting]] += 5\n                settings[settingIndex[setting]] = round(settings[settingIndex[setting]], 1)\n                infoText(setting)\n\n    elif controller_1.buttonUp.pressing() == False:\n        pressedUp = False\n\n    if controller_1.buttonDown.pressing() and pressedDown == False:\n        pressedDown = True\n        if setting == 0 or setting == 1:\n            if settings[settingIndex[setting]] > 0:\n                settings[settingIndex[setting]] -= 0.1\n                settings[settingIndex[setting]] = round(settings[settingIndex[setting]], 1)\n                infoText(setting)\n\n        elif setting == 2 or setting == 3:\n            if settings[settingIndex[setting]] > 0:\n                settings[settingIndex[setting]] -= 5\n                infoText(setting)\n\n    elif controller_1.buttonDown.pressing() == False:\n        pressedDown = False\n        \n    # Thrower controls\n    if controller_1.buttonR2.pressing() == True:\n        motor5.set_velocity(settings['oSpeed'], PERCENT)\n        motor6.set_velocity(settings['oSpeed'], PERCENT)\n\n    elif controller_1.buttonR1.pressing() == True:\n        motor5.set_velocity(settings['iSpeed'] * -1, PERCENT)\n        motor6.set_velocity(settings['iSpeed'] * -1, PERCENT)\n    #haha\n    else:\n        motor5.set_velocity(0, PERCENT)\n        motor6.set_velocity(0, PERCENT)","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"motor1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"motor2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"motor3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"motor4","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"motor5","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[12],"name":"motor6","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}